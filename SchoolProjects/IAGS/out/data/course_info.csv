1,cs215,Unix Programming Environment,This course covers common Unix commands\: shell scripting\: regular expressions\: tools and the applications used in a Unix programming environment. The tools to be introduced include make utility\: a debugger\: advanced text editing and text processing (vi\: sed\: tr). Prerequisite: CMPS 150 or permission of instructor.,5
2,cs216,Unix System Administration,This course covers the knowledge and skills critical to administering a multi-user\: networked Unix system. The course assumes a basic knowledge of Unix commands and an editor (vi or Emacs). Topics include: kernel and network configuration\: managing daemons\: devices\: and critical processes\: controlling startup and shutdown events\: account management\: installing software\: security issues\: shell scripting. Many concepts will be demonstrated during hands-on labs. Prerequisite: CMPS 215.,5
3,cs221,Programming Fundamentals,Introduces the fundamentals of procedural programming. Topics include: data types\: control structures\: functions\: arrays\: and standard and file I/O. The mechanics of compiling\: linking\: running\: debugging and testing within a particular programming environment are covered. Ethical issues and a historical perspective of programming within the context of computer science as a discipline is given. [F\: W\: S],5
4,cs222,Object-Oriented Programming,Builds on foundation provided by CMPS 221 to introduce the concepts of object-oriented programming. The course focuses on the definition and use of classes and the fundamentals of object-oriented design. Other topics include: an overview of programming language principles\: basic searching and sorting techniques\: and an introduction to software engineering issues. Prerequisite: CMPS 221. [F\: W\: S],5
5,cs223,Data Structures and Algorithms,Builds on the foundation provided by the CMPS 221-222 sequence to introduce the fundamental concepts of data structures and the algorithms that proceed from them within the framework of object-oriented programming methodology. Topics include: recursion\: fundamental data structures (including stacks\: queues\: linked lists\: hash tables\: trees\: and graphs)\: and the basics of algorithmic analysis. Prerequisite: CMPS 222. [F\: W\: S],5
6,cs300,Discreet Structures,Elementary logic and set theory\: functions and relations\: induction and recursion\: elementary algorithm analysis\: counting techniques\: and introduction to computability. Prerequisite: CMPS 223.,5
7,cs312,Algorithm Analysis,Algorithm analysis\: asymptotic notation\: hashing\: hash tables\: scatter tables\: and AVL and B-trees\: brute-force and greedy algorithms\: divide-and-conquer algorithms\: dynamic programming\: randomized algorithms\: graphs and graph algorithms\: and distributed algorithms. Prerequisite: CMPS 223.,5
8,cs320,Digital Circuits,An introduction to the logical design of digital computers including the analysis and synthesis of combinatorial and sequential circuits\: and the use of such circuits in building processor components and memory. The course will apply the circuit theory to the design of an elementary processor with a small instruction set with absolute addressing and a hard-wired control unit. An assembly language for this processor will also be developed. This course includes a laboratory which will cover a mix of actual circuit work together with circuit synthesis and testing using software. Prerequisite: One course in programming or permission of the instructor.,5
9,cs321,Computer Architecture,This course follows the Digital Logic Design course and focuses on the design of the CPU and computer system at the architectural (or functional) level: CPU instruction sets and functional units\: data types\: control unit design\: interrupt handling and DMA\: I/O support\: memory hierarchy\: virtual memory\: and buses and bus timing. In contrast\: the Digital logic Design course is primarily concerned with implementation that is\: the combinatorial and sequential circuits which are the building blocks of the functional units. Prerequisite: CMPS 223 and 320.,5
10,cs335,Software Engineering,Introduction to the software life cycle. Methods and tools for the analysis\: design\: and specification of large\: complex software systems. Project documentation\: organization and control\: communication\: and time and cost estimates. Group laboratory project. Graphical User Interface Design. Technical presentation methods and practice. Software design case studies and practices. Prerequisite: CMPS 223.,5
11,cs342,Database Systems,Basic issues in data modeling\: database application software design and implementation. File organizations\: relational model\: relational database management systems\: and query languages are addressed in detail. Two-tier architecture\: three-tier architecture and development tools are covered. Prerequisite: CMPS 223.,5
12,cs350,Programming Lang.,An examination of underlying concepts in high level programming languages and techniques for the implementation of a representative sample of such languages with regard to considerations such as typing\: block structure\: scope\: recursion\: procedures invocation\: context\: binding\: and modularity. Prerequisite: CMPS 223.,5
13,cs356,Artificial Intelligence,This course is intended to teach the fundamentals of artificial intelligence which include topics such as expert systems\: artificial neural networks\: fuzzy logic\: inductive learning and evolutionary algorithms. Prerequisite: CMPS 223.,5
14,cs360,Operating Systems,A study of the introductory concepts in operating systems: historical development of batch\: multiprogrammed\: and interactive systems file\: memory\: device\: process\: and thread management interrupt and trap handlers\: abstraction layer\: message passing kernel tasks and kernel design issues signals and interprocess communication synchronization\: concurrency\: and deadlock problems. Prerequisite: CMPS 223.,5
15,cs371,Computer Graphics,Introduction to computer graphics hardware\: animation\: two-dimensional transformations\: basic concepts of computer graphics\: theory and implementation. Use of graphics APIs such as DirectX or OpenGL. Developing 2D graphics applications software. Prerequisite: CMPS 223.,5
16,cs376,Networking,A study of computer networks focusing on the TCP/IP Internet protocols and covering in detail the four layers: physical\: data link\: network\: and transport. This course includes a laboratory in which students will cover important network utilities\: debugging tools\: process and thread control as it relates to network programming\: and the coding of programs which do interprocess communication over sockets. The typical Internet client program which accesses a TCP network server daemon will be covered in detail. Prerequisite: CMPS 223.,5
17,cs457,Robotics,The course will provide an opportunity for students to understand intelligent robot system architecture and to design algorithms and programs for control and planning of intelligent robot systems based on analytical modeling and behavior modeling. Students will use simulation software (Webots) and hardware test-bed (Kheraper II) to verify their algorithm and program performance during their project work. Prerequisites: CMPS 223.,5
18,cs150,Introduction to Unix,Basic Unix commands and programming utilities will be introduced. Students will learn how to use email\: a text editor\: and manage files and directories. This course is designed for students who have no experience with Unix. [F\: W\: S],1
