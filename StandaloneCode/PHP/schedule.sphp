<?php
////////////////////////////////////////////////////////////////////////
//	Program Name:   schedule.php
//	Programmer:     Joseph E. Sutton
//	Description:    Scheduler Class Functions
//	Creation date:  
//	Last Updated:   2/10/2006
//	Version:        1.00
////////////////////////////////////////////////////////////////////////

if( !defined('__SCHEDULE__') )
{
   define('__SCHEDULE__', 1);
   require($gClassDir.'html_tmpl.php');

   class cSchedule
   {
      var $last_cat = -1;
      var $xml_array = array('title' => '', 'cat' => array());
   
      function GetPage($html_tmpl, $xml_file = 'xml/schedule.xml')
      {
         $main = new HtmlTmpl($html_tmpl);
         $erow = new HtmlTmpl();
         $orow = new HtmlTmpl();
         $temp = new HtmlTmpl();
         $erow->Set( $main->GetClip('<time_row>', '</time_row>') );
         $stime = 0;
         $etime = 0;
         
         $weekday_array = $this->BuildDayTimeArray($xml_file);
         $main->Replace('%TITLE%', $this->xml_array['title']);
         
         $h = 7; $m = 0;
         $list = '';
         for($i = 0; $i < 28; $i++)
         {
            $temp->Set( $erow->Get() ); // copy
            $stime = mktime($h, $m, 0, 1, 1, 98);
            $st = date('h:i A', $stime);
         
            if($i != 0) {
               $temp->ReplaceClip('', '<first>', '</first>');
            } else {
               $temp->Replace('', "<first>");
               $temp->Replace('', "</first>");
            }
            
            $temp->Replace("%TIME%", $st);
            for($j = 0; $j < 7; $j++)
            {
               foreach($weekday_array[$j] as $value)
               {
                  if( ($h == $value[0]) && ($m == $value[1]) )
                  {
                     if( (($h*60 + $m) >= ($value[0]*60 + $value[1])) &&
                         (($h*60 + $m) <= ($value[2]*60 + $value[3])) )
                     {
                        $temp->Replace("%BGC{$j}%", $value['bgcolor']);
                        $temp->Replace("%FGC{$j}%", $value['fgcolor']);
                        $temp->Replace("%N{$j}%", $value['name']);
                     }
                  } else {
                     if( (($h*60 + $m) > ($value[0]*60 + $value[1])) &&
                         (($h*60 + $m) < ($value[2]*60 + $value[3])) )
                     {
                        $temp->Replace("%BGC{$j}%", $value['bgcolor']);
                        $temp->Replace("%FGC{$j}%", $value['fgcolor']);
                     }
                  }
               }
               
               $temp->Replace("%BGC{$j}%", '#FFFFFF');
               $temp->Replace("%FGC{$j}%", '#FFFFFF');
               $temp->Replace("%N{$j}%", '&nbsp;');
            }
            
            $list .= $temp->Get();
            $m += 30;
            if($m == 60) { $m = 0; $h++; }
         }
         $main->ReplaceClip($list, '<time_row>', '</time_row>');
         
         
         /*
         $erow->Set( $main->GetClip('<hours_row_even>', '</hours_row_even>') );
         $orow->Set( $main->GetClip('<hours_row_odd>', '</hours_row_odd>') );
         $list = '';
         $total = 0;
         for($i = 0; $i < 7; $i++)
         {
            if($i & 1) $temp->Set( $orow->Get() ); // copy odd
            else       $temp->Set( $erow->Get() ); // copy even
            
            $stime = mktime(0, 0, 0, 1, $i+4, 98);
            $st = date('l', $stime);
            $temp->Replace("%DAY_NAME%", $st);
            $row_total = 0;
            
            $stime = 0;
            $etime = 0;
            $marked1 = false;
            $marked2 = false;
            foreach($weekday_array[$i] as $value)
            {
               $sh = $value[0];
               $sm = $value[1];
               $eh = $value[2];
               $em = $value[3];
               //
               
               // two or one loop
               $stime = mktime($sh, $sm, 0, 1, 1, 98);
               $etime = mktime($eh, $em, 0, 1, 1, 98);
               if($sh < 12)
               {
                  $st = date('h:i A', $stime);
                  $temp->Replace("%FROM1%", $st);
                  $st = date('h:i A', $etime);
                  $temp->Replace("%TO1%", $st);
                  $marked1 = true;
               } else {
                  $st = date('h:i A', $stime);
                  $temp->Replace("%FROM2%", $st);
                  $st = date('h:i A', $etime);
                  $temp->Replace("%TO2%", $st);
                  $marked2 = true;
               }
            }
            
            if(!$marked1)
            {
               $temp->Replace("%FROM1%", '&nbsp;');
               $temp->Replace("%TO1%", '&nbsp;');
            }
            if(!$marked2)
            {
               $temp->Replace("%FROM2%", '&nbsp;');
               $temp->Replace("%TO2%", '&nbsp;');
            }
         
            if($stime != 0)
            {
               $st = getdate($stime);
               $et = getdate($etime);
               $row_total += ($et['hours']*60 + $et['minutes']) - ($st['hours']*60 + $st['minutes']);
               $row_total /= 60;
            }
            $temp->Replace("%ROW_TOTAL%", sprintf("%.1f", $row_total));
            $total += $row_total;
            
            $list .= $temp->Get();
         }
         $main->Replace('%TOTAL%', $total);
         
         $main->ReplaceClip('', '<hours_row_even>', '</hours_row_even>');
         $main->ReplaceClip($list, '<hours_row_odd>', '</hours_row_odd>');
         */
         
         $details = $this->BuildDetails( $main->GetClip('<details>', '</details>') );
         $main->ReplaceClip($details, '<details>', '</details>');
         
         return $main->Get();
      }
      
      function GetOfficeLocation()
      {
         $tmpl = new HtmlTmpl();
         $out = "";
         
         foreach($this->xml_array['cat'] as $ck => $cv)
         {   	    
            if( strcmp($cv['crn'], '00000') == 0)
            {
                 return $cv['loc'];
            }
         }
         
         return '';
      }
      
      function GetOfficeHourPage($tmpl_str)
      {
         $tmpl = new HtmlTmpl();
         $out = "";
         
         foreach($this->xml_array['cat'] as $ck => $cv)
         {	
            foreach($cv['slot'] as $sk => $sv)
            {       	    
               if( strcmp($cv['crn'], '00000') == 0)
               {
                  $tmpl->Set( $tmpl_str );
                  
                  $tmpl->Replace("%day%", $sv['day']);
                  $tmpl->Replace("%time%", $sv['time']);
                  
                  $out .= $tmpl->Get();
               }
            }
         }
         
         return $out;      	
      }
      
      function BuildDetails($tmpl_str)
      {
      	$tmpl = new HtmlTmpl();
        $out = "";
        
        //print_r($this->xml_array);
        foreach($this->xml_array['cat'] as $ck => $cv)
        {	
        	foreach($cv['slot'] as $sk => $sv)
        	{
        	    $tmpl->Set( $tmpl_str );
        	    
        		foreach($cv as $key => $value)
        		{
        		    if( (strcmp($key, 'crn') == 0) &&
        		    	(strcmp($value, '00000') == 0)
        		      )
        		    {
        		    	$tmpl->Replace("%".$key."%", "&nbsp;");
        		    }
        			else if( strcmp($key, 'slot') != 0)
        			{
        				if( empty( $value ) )
        				{
        					$tmpl->Replace("%".$key."%", "&nbsp;");
        				} else {
        					$tmpl->Replace("%".$key."%", $value);
        				}
        			} else {
        				$tmpl->Replace("%day%", $sv['day']);
        				
        				$stime = "";
        				$etime = "";
        				$time = explode('-', $sv['time']);
                  
		        	    // convert time string to number
                		$time[0] = strtotime("1 January 1998 {$time[0]}");
                 		$time[1] = strtotime("1 January 1998 {$time[1]}");
                 		
                 		// convert back to string
                 		$time[0] = date("h:i A", $time[0]);
                 		$time[1] = date("h:i A", $time[1]);
                 		
                 		$stime = $time[0];
                 		$etime = $time[1];
        				
        				$tmpl->Replace("%start_time%", $stime);
        				$tmpl->Replace("%end_time%", $etime);
        			}
        		}
        		
        		$out .= $tmpl->Get();
        	} // each slot        	
        }
        
        
        return $out;
      }

      function GetArray()
      {
         return $this->xml_array;
      }
   
      function BuildDayTimeArray($file = "data.xml")
      {
         $xml_parser = xml_parser_create();
         xml_set_element_handler($xml_parser, 
            array(&$this, "startElement"),
            array(&$this, "endElement")
            );
         if (!($fp = fopen($file, "r"))) {
            die("could not open XML input");
         }
      
         // xml parse loop
         while($data = fread($fp, 4096))
         {
            if( !xml_parse($xml_parser, $data, feof($fp)) )
            {
               die(sprintf("XML error: %s at line %d",
                  xml_error_string(xml_get_error_code($xml_parser)),
                  xml_get_current_line_number($xml_parser)));
            }
         }
         
         // reformat xml array for weekday
         $weekday_array = array();
         $weekday_array[0] = array();
         $weekday_array[1] = array();
         $weekday_array[2] = array();
         $weekday_array[3] = array();
         $weekday_array[4] = array();
         $weekday_array[5] = array();
         $weekday_array[6] = array();
         // loop for all catagories
         foreach($this->xml_array['cat'] as $ck => $cv)
         {
            //  loop for all slots
            foreach($cv['slot'] as $key => $value)
            {
               // loop for all days
               for($i = 0; $i < strlen($value['day']); $i++)
               {
                  // breakup each day letter
                  $d = substr($value['day'], $i, 1);
                  
                  // break up time
                  $time = explode('-', $value['time']);
                  
                  $time['name'] = $cv['name'];
                  $time['bgcolor'] = $cv['bgcolor'];
                  $time['fgcolor'] = $cv['fgcolor'];
                  
                  // convert time string to number
                  $time[0] = strtotime("1 January 1998 {$time[0]}");
                  $time[2] = strtotime("1 January 1998 {$time[1]}");
                  
                  // get hour, min from long number
                  $t = getdate($time[0]);
                  $time[0] = $t['hours'];
                  $time[1] = $t['minutes'];
                  
                  // get hour, min from long number
                  $t = getdate($time[2]);
                  $time[2] = $t['hours'];
                  $time[3] = $t['minutes'];
                  
                  // change day letter to number
                  switch($d)
                  {
                     case 'U': $d = 0; break;
                     case 'M': $d = 1; break;
                     case 'T': $d = 2; break;
                     case 'W': $d = 3; break;
                     case 'R': $d = 4; break;
                     case 'F': $d = 5; break;
                     case 'S': $d = 6; break;
                  }
                  array_push($weekday_array[$d], $time );
               }
            }
         }
         
         //print_r($this->weekday_array);
         xml_parser_free($xml_parser);
         
         return $weekday_array;
      }
      
      function startElement($parser, $name, $attrs = '')
      {
         switch( strtolower($name) )
         {
            // copy data from xml to array
            case 'crn':
               $this->xml_array['crn'] = $attrs['CRN'];
               break;
            case 'title':
               $this->xml_array['title'] = $attrs['NAME'];
               break;
            case 'cat':
               $this->last_cat++;
               array_push($this->xml_array['cat'], array(
                                                     'crn' => $attrs['CRN'],
                                                     'name' => $attrs['NAME'],
                                                     'desc' => $attrs['DESC'],
                                                     'loc' => $attrs['LOC'],
                                                     'bgcolor' => $attrs['BGCOLOR'],
                                                     'fgcolor' => $attrs['FGCOLOR'],
                                                     'slot' => array()
                                                     )
                         );
               
               break;
            case 'slot':
               array_push($this->xml_array['cat'][$this->last_cat]['slot'], 
                           array('day' => $attrs['DAY'],
                                 'time' => $attrs['TIME']));
               break;
         }
      }
      
      function endElement($parser, $name)
      {
      }
      
   } // end class
} // end if def

?>
